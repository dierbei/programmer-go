syntax = "v1"

type reqInterviewId {
    ID string `json:"_id"`
}
type author {
    ID string `json:"_id"`
    Name string `json:"name"`
}
type interview {
    ID string `json:"_id"`
    Author author `json:"author"`
    ClickNum int64 `json:"click_num,default=0"`
    Good int64 `json:"good,default=0"`
    HardStatus string `json:"hard_status"`
    HotNum int64 `json:"hot_num,default=0"`
    Summary string `json:"summary"`
    Tags []string `json:"tags"`
    Title string `json:"title"`
    UpdatedTime string `json:"updated_time"`
    //    是否当前用户已提交评论，程序查询当前用户id是否在comments列表内
    Status bool `json:"status"`
    //Comments []string `json:"comments"`
}
type interview_detail {
    interview
    StarNum int64 `json:"star_num,default=0"`
    Bad int64 `json:"bad,default=0"`
    Content string `json:"content"`
    CreatedTime string `json:"created_time"`
}
type reqInterviews {
    Tags []string `json:"tags"`
    Search string `json:"search"`
}
// 共同类
type commResp {
    Ok bool `json:"ok"`
    Error string `json:"error"`
}

@server(
    jwt: Auth
    group: interviews
    prefix: api/v1
)

service pg-backend {
    @handler AddInterview
    post /interviews (interview_detail) returns (interview_detail)

    @handler DeleteInterview
    delete /interviews/:_id (reqInterviewId) returns (commResp)

    @handler UpdateInterview
    put /interviews/:_id (interview_detail) returns (interview_detail)

    @handler GetInterview
    get /interviews/:_id (reqInterviewId) returns (interview_detail)

    @handler GetAllInterview
    get /interviews (reqInterviews) returns ([]interview)
}